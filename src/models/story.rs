use serde::{Deserialize, Serialize};

#[derive(Serialize, Deserialize, Debug)]
pub struct Story {
    pub pack_code: String,
    pub pack_name: String,
    pub type_code: String,
    pub type_name: String,
    pub faction_code: String,
    pub faction_name: String,
    pub linked_to_code: Option<String>,
    pub linked_to_name: Option<String>,
    pub position: u32,
    pub exceptional: bool,
    pub myriad: bool,
    pub code: String,
    pub name: String,
    pub real_name: String,
    pub text: String,
    pub real_text: String,
    pub quantity: u32,
    pub health_per_investigator: bool,
    pub real_slot: Option<String>,
    pub flavor: Option<String>,
    pub is_unique: bool,
    pub permanent: bool,
    pub double_sided: bool,
    pub url: String,
    pub imagesrc: Option<String>,
    pub linked_card: Option<LinkedCard>,
    pub spoiler: Option<u32>,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct LinkedCard {
    pub pack_code: String,
    pub pack_name: String,
    pub type_code: String,
    pub type_name: String,
    pub faction_code: String,
    pub faction_name: String,
    pub encounter_code: String,
    pub encounter_name: String,
    pub id: Option<u32>,
    pub position: u32,
    pub exceptional: bool,
    pub myriad: bool,
    pub encounter_position: u32,
    pub code: String,
    pub name: String,
    pub real_name: String,
    pub subname: Option<String>,
    pub bonded_to: Option<String>,
    pub bonded_count: Option<u32>,
    pub cost: Option<u32>,
    pub text: Option<String>,
    pub customization_text: Option<String>,
    pub customization_change: Option<String>,
    pub real_text: Option<String>,
    pub quantity: u32,
    pub skill_willpower: Option<u32>,
    pub skill_intellect: Option<u32>,
    pub skill_combat: Option<u32>,
    pub skill_agility: Option<u32>,
    pub skill_wild: Option<u32>,
    pub xp: Option<u32>,
    pub shroud: Option<u32>,
    pub clues: Option<u32>,
    pub clues_fixed: Option<bool>,
    pub doom: Option<u32>,
    pub health: Option<u32>,
    pub health_per_investigator: bool,
    pub sanity: Option<u32>,
    pub enemy_damage: Option<u32>,
    pub enemy_horror: Option<u32>,
    pub enemy_fight: Option<u32>,
    pub enemy_evade: Option<u32>,
    pub victory: Option<u32>,
    pub vengeance: Option<u32>,
    pub deck_limit: Option<u32>,
    pub slot: Option<String>,
    pub real_slot: Option<String>,
    pub stage: Option<u32>,
    pub traits: Option<String>,
    pub real_traits: Option<String>,
    pub tags: Option<Vec<String>>,
    pub deck_requirements: Option<String>,
    pub deck_options: Option<String>,
    pub customization_options: Option<String>,
    pub restrictions: Option<String>,
    pub flavor: String,
    pub illustrator: Option<String>,
    pub is_unique: bool,
    pub exile: bool,
    pub hidden: bool,
    pub permanent: bool,
    pub double_sided: bool,
    pub back_text: Option<String>,
    pub back_flavor: Option<String>,
    pub back_name: Option<String>,
    pub octgn_id: Option<String>,
    pub url: String,
    pub imagesrc: Option<String>,
    pub spoiler: u32,
}

impl Story {
    pub fn to_string_pretty(&self) -> serde_json::Result<String> {
        serde_json::to_string_pretty(self)
    }
}
